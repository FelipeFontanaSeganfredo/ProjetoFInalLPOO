
package view.caminhao;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.Caminhao;
import model.Motorista;

public class TelaEditarCaminhao extends javax.swing.JFrame {

    public TelaEditarCaminhao() {
        initComponents();
        carregarMotoristas(); // Carregar os motoristas no comboBox
        carregarCaminhoes();
    }
    
private void carregarCaminhoes() {
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("meu-persistence-unit");
    EntityManager em = emf.createEntityManager();
    try {
        // Consulta para buscar todos os caminhões
        List<Caminhao> caminhoes = em.createQuery("SELECT c FROM Caminhao c", Caminhao.class).getResultList();
        
        // Configura o modelo do JComboBox para caminhões
        DefaultComboBoxModel<Caminhao> model = new DefaultComboBoxModel<>(caminhoes.toArray(new Caminhao[0]));
        cmbCaminhao.setModel(model);

        // Mensagem de sucesso opcional
        if (caminhoes.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum caminhão encontrado.");
        }
    } catch (Exception e) {
        // Trata e exibe erros
        JOptionPane.showMessageDialog(this, "Erro ao carregar caminhões: " + e.getMessage());
    } finally {
        em.close();
        emf.close();
    }
}


private void carregarMotoristas() {
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("meu-persistence-unit");
    EntityManager em = emf.createEntityManager();
    try {
        // Consulta para buscar todos os motoristas
        List<Motorista> motoristas = em.createQuery("SELECT m FROM Motorista m", Motorista.class).getResultList();
        
        // Configura o modelo do JComboBox para motoristas
        DefaultComboBoxModel<Motorista> model = new DefaultComboBoxModel<>(motoristas.toArray(new Motorista[0]));
        cmbMotorista.setModel(model);

        // Mensagem de sucesso opcional
        if (motoristas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum motorista encontrado.");
        }
    } catch (Exception e) {
        // Trata e exibe erros
        JOptionPane.showMessageDialog(this, "Erro ao carregar motoristas: " + e.getMessage());
    } finally {
        em.close();
        emf.close();
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbMotorista = new javax.swing.JComboBox<>();
        btnCancelar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbCaminhao = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cmbMotorista.setModel(new javax.swing.DefaultComboBoxModel<>(new Motorista[0]));
        cmbMotorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMotoristaActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        jLabel1.setText("Motorista");

        jLabel2.setText("Caminhão");

        cmbCaminhao.setModel(new javax.swing.DefaultComboBoxModel<>(new Caminhao[0]));
        cmbCaminhao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCaminhaoActionPerformed(evt);
            }
        });

        jLabel3.setText("Editar Caminhão");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jLabel3)
                        .addGap(116, 116, 116))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbCaminhao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancelar)
                        .addComponent(btnSalvar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbCaminhao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cmbMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cmbCaminhaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCaminhaoActionPerformed
        // Verifica se um caminhão foi selecionado
    Caminhao caminhaoSelecionado = (Caminhao) cmbCaminhao.getSelectedItem();
    if (caminhaoSelecionado != null) {
        System.out.println("Caminhão selecionado: " + caminhaoSelecionado.getId());
        // Aqui você pode realizar ações com o caminhão selecionado
    }

    }//GEN-LAST:event_cmbCaminhaoActionPerformed

    private void cmbMotoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMotoristaActionPerformed
        // Verifica se um motorista foi selecionado
    Motorista motoristaSelecionado = (Motorista) cmbMotorista.getSelectedItem();
    if (motoristaSelecionado != null) {
        System.out.println("Motorista selecionado: " + motoristaSelecionado.getNome());
        // Aqui você pode realizar ações com o motorista selecionado
    }
    }//GEN-LAST:event_cmbMotoristaActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // Obtém o caminhão e o motorista selecionados
    Caminhao caminhaoSelecionado = (Caminhao) cmbCaminhao.getSelectedItem();
    Motorista motoristaSelecionado = (Motorista) cmbMotorista.getSelectedItem();

    if (caminhaoSelecionado != null && motoristaSelecionado != null) {
        // Cria o EntityManager e a transação
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("meu-persistence-unit");
        EntityManager em = emf.createEntityManager();

        try {
            // Inicia uma transação
            em.getTransaction().begin();

            // Atualiza as informações do caminhão
            caminhaoSelecionado.setMotorista(motoristaSelecionado); // Associando o motorista ao caminhão

            // O EntityManager vai automaticamente salvar a atualização do objeto quando o commit for feito
            em.merge(caminhaoSelecionado);

            // Commit da transação
            em.getTransaction().commit();

            // Exibe uma mensagem de sucesso
            JOptionPane.showMessageDialog(this, "Caminhão atualizado com sucesso.");

        } catch (Exception e) {
            // Se algo deu errado, realiza o rollback
            if (em.getTransaction().isActive()) {
                em.getTransaction().rollback();
            }
            JOptionPane.showMessageDialog(this, "Erro ao salvar: " + e.getMessage());
        } finally {
            // Fecha o EntityManager
            em.close();
            emf.close();
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um caminhão e um motorista.");
    }
    }//GEN-LAST:event_btnSalvarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaEditarCaminhao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaEditarCaminhao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaEditarCaminhao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaEditarCaminhao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaEditarCaminhao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<Caminhao> cmbCaminhao;
    private javax.swing.JComboBox<Motorista> cmbMotorista;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
