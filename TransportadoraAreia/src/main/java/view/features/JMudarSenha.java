/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.features;

import config.SessaoUsuario;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.NoResultException;
import jakarta.persistence.Persistence;
import javax.swing.JOptionPane;
import model.Administrador;
import model.Motorista;

/**
 *
 * @author User PC
 */
public class JMudarSenha extends javax.swing.JFrame {
    
    private static final EntityManagerFactory emf = Persistence.createEntityManagerFactory("meu-persistence-unit");

    /**
     * Creates new form JMudarSenha
     */
    public JMudarSenha() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField3 = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CampoSenhaAntiga = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        CampoSenhaNova = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        CampoConfirmarSenha = new javax.swing.JPasswordField();
        BotaoConfirmar = new javax.swing.JButton();

        jPasswordField3.setText("jPasswordField3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Troca de senha");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Senha antiga");

        CampoSenhaAntiga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoSenhaAntigaActionPerformed(evt);
            }
        });

        jLabel3.setText("Nova Senha");

        jLabel4.setText("Confirme a nova senha");

        CampoConfirmarSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoConfirmarSenhaActionPerformed(evt);
            }
        });

        BotaoConfirmar.setText("Mudar senha");
        BotaoConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoConfirmarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CampoSenhaAntiga)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CampoSenhaNova)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CampoConfirmarSenha, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(139, Short.MAX_VALUE)
                .addComponent(BotaoConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CampoSenhaAntiga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CampoSenhaNova, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CampoConfirmarSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BotaoConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CampoSenhaAntigaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoSenhaAntigaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoSenhaAntigaActionPerformed

    private void CampoConfirmarSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoConfirmarSenhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoConfirmarSenhaActionPerformed

    private void BotaoConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoConfirmarActionPerformed
         String senhaAntiga = new String(CampoSenhaAntiga.getPassword());
        String senhaNova = new String(CampoSenhaNova.getPassword());
        String senhaConfirmar = new String(CampoConfirmarSenha.getPassword());

        if (!validarEntradas(senhaAntiga, senhaNova, senhaConfirmar)) return;

        alterarSenhaUsuario(senhaAntiga, senhaNova);
    }//GEN-LAST:event_BotaoConfirmarActionPerformed
    
    private boolean validarEntradas(String senhaAntiga, String senhaNova, String senhaConfirmar) {
        if (senhaAntiga.isEmpty() || senhaNova.isEmpty() || senhaConfirmar.isEmpty()) {
            exibirMensagem("Preencha todos os campos!", "Erro", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (senhaAntiga.equals(senhaNova)) {
            exibirMensagem("A nova senha deve ser diferente da senha antiga!", "Erro", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (!senhaNova.equals(senhaConfirmar)) {
            exibirMensagem("As senhas não coincidem!", "Erro", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        return true;
    }
    /**
 * Método para gerar hash MD5 da senha
 */
    private String hashMD5(String senha) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(senha.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : array) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (java.security.NoSuchAlgorithmException ex) {
            throw new RuntimeException("Erro ao gerar hash MD5", ex);
        }
    }
    
    /**
     * Realiza a alteração da senha do administrador ou motorista logado.
     */
    private void alterarSenhaUsuario(String senhaAntiga, String senhaNova) {
        EntityManager em = emf.createEntityManager();

        try {
            em.getTransaction().begin();
            


            // Recupera a sessão para determinar o tipo de usuário logado
            int userId = SessaoUsuario.getInstance().getIdUsuario();
            String tipoUsuario = SessaoUsuario.getInstance().getTipoUsuario(); // "Admin" ou "Motorista"

            System.out.println("Tipo de Usuário na sessão: " + tipoUsuario);
            if ("admin".equalsIgnoreCase(tipoUsuario)) {
                alterarSenhaAdmin(em, userId, senhaAntiga, senhaNova);
            } else if ("Motorista".equalsIgnoreCase(tipoUsuario)) {
                alterarSenhaMotorista(em, userId, senhaAntiga, senhaNova);
            } else {
                throw new IllegalArgumentException("Tipo de usuário desconhecido!");
            }

            em.getTransaction().commit();

            exibirMensagem("Senha alterada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            dispose(); // Fecha a janela após sucesso.
        } catch (NoResultException e) {
            exibirMensagem("Senha antiga incorreta!", "Erro", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            em.getTransaction().rollback();
            exibirMensagem("Erro ao alterar senha: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } finally {
            em.close();
        }
    }
    
    /**
     * Altera a senha de um administrador.
     */
    private void alterarSenhaAdmin(EntityManager em, int adminId, String senhaAntiga, String senhaNova) {
        Administrador admin = em.createQuery(
                "SELECT a FROM Administrador a WHERE a.id = :adminId AND a.senha = :senhaAntiga", Administrador.class)
                .setParameter("adminId", adminId)
                .setParameter("senhaAntiga", hashMD5(senhaAntiga))
                .getSingleResult();

        admin.setSenha(hashMD5(senhaNova));
        em.merge(admin);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JMudarSenha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JMudarSenha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JMudarSenha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JMudarSenha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JMudarSenha().setVisible(true);
            }
        });
    }
    
    /**
     * Altera a senha de um motorista.
     */
    private void alterarSenhaMotorista(EntityManager em, int motoristaId, String senhaAntiga, String senhaNova) {
        Motorista motorista = em.createQuery(
                "SELECT m FROM Motorista m WHERE m.id = :motoristaId AND m.senha = :senhaAntiga", Motorista.class)
                .setParameter("motoristaId", motoristaId)
                .setParameter("senhaAntiga", hashMD5(senhaAntiga))
                .getSingleResult();

        motorista.setSenha(hashMD5(senhaNova));
        em.merge(motorista);
    }
    
    /**
     * Exibe mensagens de diálogo com o usuário.
     */
    private void exibirMensagem(String mensagem, String titulo, int tipoMensagem) {
        JOptionPane.showMessageDialog(this, mensagem, titulo, tipoMensagem);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotaoConfirmar;
    private javax.swing.JPasswordField CampoConfirmarSenha;
    private javax.swing.JPasswordField CampoSenhaAntiga;
    private javax.swing.JPasswordField CampoSenhaNova;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField jPasswordField3;
    // End of variables declaration//GEN-END:variables
}
